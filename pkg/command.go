package pkg

type CommandID uint32

const (
	SMPP_REQUEST_MIN, SMPP_RESPONSE_MIN CommandID = iota, 0x80000000 + iota
	SMPP_BIND_RECEIVER, SMPP_BIND_RECEIVER_RESP
	SMPP_BIND_TRANSMITTER, SMPP_BIND_TRANSMITTER_RESP
	SMPP_QUERY, SMPP_QUERY_RESP
	SMPP_SUBMIT, SMPP_SUBMIT_RESP
	SMPP_DELIVER, SMPP_DELIVER_RESP
	SMPP_UNBIND, SMPP_UNBIND_RESP
	SMPP_REPLACE, SMPP_REPLACE_RESP
	SMPP_CANCEL, SMPP_CANCEL_RESP
	SMPP_BIND_TRANSCEIVER, SMPP_BIND_TRANSCEIVER_RESP
	// Reserved
	_, _
	SMPP_OUTBIND, _
)

const (
	SMPP_GENERIC_NACK                         CommandID = 0x80000000
	SMPP_ENQUIRE_LINK, SMPP_ENQUIRE_LINK_RESP CommandID = 0x00000015, 0x80000015
	SMPP_SUBMIT_MULTI, SMPP_SUBMIT_MULTI_RESP CommandID = 0x00000021, 0x80000021
	SMPP_DATA, SMPP_DATA_RESP                 CommandID = 0x00000103, 0x80000103
	SMPP_REQUEST_MAX, SMPP_RESPONSE_MAX       CommandID = 0x00000104, 0x80000104
)

func (id CommandID) String() string {
	if id <= SMPP_BIND_TRANSCEIVER && id > SMPP_REQUEST_MIN {
		return []string{
			"SMPP_BIND_RECEIVER",
			"SMPP_BIND_TRANSMITTER",
			"SMPP_QUERY",
			"SMPP_SUBMIT",
			"SMPP_DELIVER",
			"SMPP_UNBIND",
			"SMPP_REPLACE",
			"SMPP_CANCEL",
			"SMPP_BIND_TRANSCEIVER",
		}[id-1]
	}

	if id <= SMPP_BIND_TRANSCEIVER_RESP && id >= SMPP_RESPONSE_MIN {
		return []string{
			"SMPP_GENERIC_NACK",
			"SMPP_BIND_RECEIVER_RESP",
			"SMPP_BIND_TRANSMITTER_RESP",
			"SMPP_QUERY_RESP",
			"SMPP_SUBMIT_RESP",
			"SMPP_DELIVER_RESP",
			"SMPP_UNBIND_RESP",
			"SMPP_REPLACE_RESP",
			"SMPP_CANCEL_RESP",
			"SMPP_BIND_TRANSCEIVER_RESP",
		}[id-0x80000000]
	}

	switch id {
	case SMPP_ENQUIRE_LINK:
		return "SMPP_ENQUIRE_LINK"
	case SMPP_ENQUIRE_LINK_RESP:
		return "SMPP_ENQUIRE_LINK_RESP"
	case SMPP_SUBMIT_MULTI:
		return "SMPP_SUBMIT_MULTI"
	case SMPP_SUBMIT_MULTI_RESP:
		return "SMPP_SUBMIT_MULTI_RESP"
	case SMPP_DATA:
		return "SMPP_DATA"
	case SMPP_DATA_RESP:
		return "SMPP_DATA_RESP"
	}
	return "unknown"
}
